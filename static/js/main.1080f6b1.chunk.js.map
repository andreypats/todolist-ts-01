{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","param","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","push","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1080f6b1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AxiosError} from \"axios\";\r\n\r\n// thunks for toolkit\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: {errors: Array<string>, fieldsErrors?: Array<FieldErrorType>}\r\n}> ('auth/login', async (data: LoginParamsType, thunkAPI)=> {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            // return можно не писать\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as any;\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk ('auth/logout', async (param,thunkAPI)=> {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            // return можно не писать\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as any;\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message]})\r\n    }\r\n\r\n})\r\n\r\n// create slice for toolkit\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        // state - черновик state\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase (loginTC.fulfilled, (state, action) => {\r\n        builder.addCase (loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        });\r\n        builder.addCase (logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        });\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\n// thunks\r\n/*export const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n","import {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n}\r\n\r\n// thunks for toolkit\r\nexport const initializeAppTC = createAsyncThunk ('app/initializeApp', async (param,thunkAPI)=> {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        thunkAPI.dispatch(setIsLoggedInAC({value: true}));\r\n    }\r\n    // return можно не писать\r\n    return\r\n})\r\n\r\n// create slice for toolkit\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        // state - черновик state\r\n        setAppErrorAC (state, action: PayloadAction<{error: ErrorType}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC (state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        /*setAppInitializedAC (state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }*/\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        });\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions;\r\n\r\n/*export const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        }\r\n        dispatch(setAppInitializedAC({isInitialized: true}));\r\n    })\r\n}*/\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks for toolkit\r\nexport const fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists',async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (err) {\r\n        const error: AxiosError = err as any;\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message]})\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk ('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({ id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return { id: todolistId}\r\n})\r\nexport const addTodolistTC = createAsyncThunk ('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTodolist(title)\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolist: res.data.data.item}\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk ('todolists/changeTodolistTitle', async (param: {id: string, title: string}) => {\r\n    await todolistsAPI.updateTodolist(param.id, param.title)\r\n    return {id: param.id, title: param.title}\r\n})\r\n\r\n// create slice for toolkit\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        // state - черновик state\r\n        changeTodolistFilterAC (state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC (state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase (fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase (removeTodolistTC.fulfilled, (state, action) => {\r\n            // state.filter(tl => tl.id != action.payload.id)\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase (addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase (changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        });\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions;\r\n\r\n// thunks\r\n/*export const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({ id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({ id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}*/\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {\r\n    addTodolistTC, fetchTodolistsTC, removeTodolistTC\r\n\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks for toolkit\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks',async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask',async (param: {taskId: string, todolistId: string}) => {\r\n    await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask',async (param: {title: string, todolistId: string}, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            const task = res.data.data.item\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {task: task}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as any;\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message]})\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask',async (param: {taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string}, thunkAPI) => {\r\n\r\n    const state = thunkAPI.getState() as AppRootStateType;\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        // console.warn('task not found in the state')\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return {taskId: param.taskId, model: param.domainModel, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as any;\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message]})\r\n    }\r\n})\r\n\r\n// create slice for toolkit\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase (addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = [];\r\n        });\r\n        builder.addCase (removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id];\r\n        });\r\n        builder.addCase (fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase (fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase (removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1);\r\n            }\r\n        });\r\n        builder.addCase (addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].push(action.payload.task)\r\n        });\r\n        builder.addCase (updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model};\r\n            }\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer;\r\n\r\n// thunks\r\n/*export const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks: tasks, todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n}*/\r\n/*export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task: task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}*/\r\n/*export const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }*/\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {status}, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId: id, domainModel: {title: newTitle}, todolistId: todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id: id, title: title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers, configureStore} from '@reduxjs/toolkit'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// store for toolkit\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>getDefaultMiddleware().prepend(thunkMiddleware),\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch;\r\nexport const  useAppDispatch = () => useDispatch<AppDispatchType>()","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType, useAppDispatch} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype FormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch (loginTC(values));\r\n\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError (error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'} rel=\"noopener noreferrer\">here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        // <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>*/}\r\n                        {/*<Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>*/}\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        // </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}